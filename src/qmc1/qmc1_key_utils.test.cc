#include "qmc1_key_utils.h"

#include <gmock/gmock.h>
#include <gtest/gtest.h>

#include <algorithm>
#include <array>
#include <cstdint>
#include <vector>

using ::testing::ContainerEq;

using namespace parakeet_crypto;

// NOLINTBEGIN(*-magic-numbers)

TEST(QMC1KeyUtils, KeyExpansion_key58_to_128)
{
    std::array<uint8_t, 58> key58 = {
        0xFF, 0xFE,                                     //
        0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, //
        0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, //
        0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, //
        0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, //
        0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, //
        0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, //
        0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, //
    };

    std::array<uint8_t, 128> key128_expected = {
        0xff, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, //
        0xfe, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, //
        0xff, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, //
        0xfe, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, //
        0xff, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, //
        0xfe, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, //
        0xff, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, //
        0xfe, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, //
        0xff, 0x38, 0x37, 0x36, 0x35, 0x34, 0x33, 0x32, //
        0xfe, 0x31, 0x30, 0x2f, 0x2e, 0x2d, 0x2c, 0x2b, //
        0xff, 0x2a, 0x29, 0x28, 0x27, 0x26, 0x25, 0x24, //
        0xfe, 0x23, 0x22, 0x21, 0x20, 0x1f, 0x1e, 0x1d, //
        0xff, 0x1c, 0x1b, 0x1a, 0x19, 0x18, 0x17, 0x16, //
        0xfe, 0x15, 0x14, 0x13, 0x12, 0x11, 0x10, 0x0f, //
        0xff, 0x0e, 0x0d, 0x0c, 0x0b, 0x0a, 0x09, 0x08, //
        0xfe, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, //
    };

    std::array<uint8_t, 128> key128{};
    qmc1::key58_to_key128(key128.data(), key58.data());
    ASSERT_THAT(key128, ContainerEq(key128_expected));
}

TEST(QMC1KeyUtils, KeyConversion_key256_to_128)
{
    std::array<uint8_t, 128> key128_expected = {
        0x9f, 0x36, 0xc9, 0x07, 0x30, 0x53, 0xfc, 0x4b, 0x6f, 0x13, 0x97, 0xd0, 0x79, 0xd2, 0xaf, 0xe1,
        0x9f, 0xa9, 0xc1, 0x11, 0x79, 0x6f, 0x84, 0xd2, 0x6f, 0x2b, 0xfd, 0x13, 0x30, 0x60, 0xc4, 0x81,
        0x9f, 0xc3, 0xc4, 0xb3, 0x30, 0xc5, 0xfd, 0x0f, 0x6f, 0xe1, 0x84, 0xf0, 0x79, 0xeb, 0xc1, 0x4b,
        0x9f, 0xa6, 0xaf, 0x26, 0x79, 0xaa, 0x97, 0xd3, 0x6f, 0x01, 0xfc, 0x62, 0x30, 0x85, 0xc9, 0xeb,
        0x9f, 0xeb, 0xc9, 0x85, 0x30, 0x62, 0xfc, 0x01, 0x6f, 0xd3, 0x97, 0xaa, 0x79, 0x26, 0xaf, 0xa6,
        0x9f, 0x4b, 0xc1, 0xeb, 0x79, 0xf0, 0x84, 0xe1, 0x6f, 0x0f, 0xfd, 0xc5, 0x30, 0xb3, 0xc4, 0xc3,
        0x9f, 0x81, 0xc4, 0x60, 0x30, 0x13, 0xfd, 0x2b, 0x6f, 0xd2, 0x84, 0x6f, 0x79, 0x11, 0xc1, 0xa9,
        0x9f, 0xe1, 0xaf, 0xd2, 0x79, 0xd0, 0x97, 0x13, 0x6f, 0x4b, 0xfc, 0x53, 0x30, 0x07, 0xc9, 0x36};
    std::array<uint8_t, 256> key256 = {
        0x4C, 0x29, 0xA7, 0xBE, 0xEB, 0xB0, 0xF0, 0x8E, 0xAD, 0xBD, 0x21, 0x1D, 0x0F, 0x8F, 0x90, 0x7C, 0x1B, 0x31,
        0x6E, 0xE2, 0xAA, 0xBA, 0x27, 0x09, 0x68, 0x5E, 0xC5, 0x9F, 0x36, 0x2D, 0x65, 0xC9, 0x46, 0x20, 0x3D, 0x2D,
        0x07, 0x7E, 0xF1, 0x69, 0x30, 0x1D, 0xBA, 0x30, 0xD2, 0x5B, 0xDE, 0x51, 0xD7, 0x6D, 0x7E, 0xD2, 0x53, 0xFB,
        0x51, 0x59, 0xBD, 0xAD, 0x4F, 0xE6, 0xA9, 0x92, 0x41, 0xFC, 0x9F, 0x22, 0x56, 0x32, 0x26, 0x63, 0x7F, 0xDB,
        0x6F, 0x06, 0xC8, 0x9B, 0x4B, 0x4A, 0x82, 0xA9, 0x74, 0xF2, 0x08, 0x1D, 0xF0, 0xB4, 0x85, 0x06, 0xD4, 0x25,
        0x49, 0x6F, 0xC3, 0x67, 0xE6, 0xC1, 0xF6, 0xC2, 0x07, 0x11, 0x60, 0xE0, 0x9A, 0xFA, 0x28, 0x50, 0x88, 0x5A,
        0x13, 0x54, 0x82, 0xFB, 0x2A, 0x3D, 0x74, 0xB7, 0xC5, 0x43, 0x49, 0x5D, 0x12, 0xA9, 0x4E, 0xF6, 0xA6, 0x72,
        0xA3, 0x97, 0xCD, 0x3F, 0xF9, 0xE3, 0x11, 0x63, 0x9E, 0xA6, 0x57, 0xE1, 0xA1, 0x12, 0x2B, 0x23, 0x6B, 0x89,
        0x33, 0xDF, 0x85, 0xF5, 0xD0, 0x36, 0xED, 0x63, 0x50, 0x20, 0x11, 0x1C, 0xEB, 0x7A, 0x6A, 0xC4, 0x60, 0x6D,
        0x48, 0xE9, 0x85, 0x93, 0xBC, 0x24, 0x73, 0xC6, 0x1F, 0x79, 0xE1, 0x4F, 0xEE, 0xC8, 0x77, 0xF0, 0x37, 0x89,
        0x62, 0xAC, 0x52, 0x35, 0x85, 0x3F, 0xDA, 0x63, 0x4B, 0x99, 0x93, 0xFD, 0xB1, 0x32, 0x34, 0x22, 0xD2, 0x4A,
        0xB7, 0x9F, 0x63, 0xDF, 0xE3, 0x48, 0x01, 0x70, 0x0D, 0x2F, 0x66, 0xD5, 0xF2, 0x63, 0x6F, 0x09, 0x38, 0x8C,
        0x36, 0xC6, 0x60, 0x44, 0x81, 0x5D, 0x2B, 0xAF, 0x17, 0x47, 0xEE, 0xCC, 0xB3, 0x35, 0xE9, 0x9A, 0x60, 0x7A,
        0xAE, 0x8D, 0xD3, 0xF1, 0x62, 0x85, 0x3E, 0xE6, 0xAD, 0x63, 0x13, 0xC9, 0xBC, 0x3C, 0x74, 0xC9, 0x36, 0x47,
        0xE1, 0x8D, 0x36, 0x84};

    std::array<uint8_t, 128> key128{};
    qmc1::key256_to_key128(key128.data(), key256.data());
    ASSERT_THAT(key128, ContainerEq(key128_expected));
}

// NOLINTEND(*-magic-numbers)
