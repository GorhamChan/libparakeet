#include "qmc1_key_utils.h"
#include "transformer/qmc/qmc1_key_utils.h"

#include <gmock/gmock.h>
#include <gtest/gtest.h>

#include <algorithm>
#include <array>
#include <cstdint>
#include <vector>

using ::testing::ContainerEq;

using namespace parakeet_crypto;

// NOLINTBEGIN(*-magic-numbers)

TEST(QMC1KeyUtils, KeyExpansion)
{
    std::array<uint8_t, 58> key58 = {
        0xFF, 0xFE,                                     //
        0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, //
        0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, //
        0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, //
        0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, //
        0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, //
        0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, //
        0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, //
    };

    std::array<uint8_t, 128> key128_expected = {
        0xff, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, //
        0xfe, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, //
        0xff, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, //
        0xfe, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, //
        0xff, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, //
        0xfe, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, //
        0xff, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, //
        0xfe, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, //
        0xff, 0x38, 0x37, 0x36, 0x35, 0x34, 0x33, 0x32, //
        0xfe, 0x31, 0x30, 0x2f, 0x2e, 0x2d, 0x2c, 0x2b, //
        0xff, 0x2a, 0x29, 0x28, 0x27, 0x26, 0x25, 0x24, //
        0xfe, 0x23, 0x22, 0x21, 0x20, 0x1f, 0x1e, 0x1d, //
        0xff, 0x1c, 0x1b, 0x1a, 0x19, 0x18, 0x17, 0x16, //
        0xfe, 0x15, 0x14, 0x13, 0x12, 0x11, 0x10, 0x0f, //
        0xff, 0x0e, 0x0d, 0x0c, 0x0b, 0x0a, 0x09, 0x08, //
        0xfe, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, //
    };

    std::array<uint8_t, 128> key128{};
    qmc1::key58_to_key128(key128.data(), key58.data());
    ASSERT_THAT(key128, ContainerEq(key128_expected));
}

// NOLINTEND(*-magic-numbers)
