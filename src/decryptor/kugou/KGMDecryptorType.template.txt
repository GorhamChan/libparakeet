#include "KGMDecryptor.h"

namespace parakeet_crypto::decryptor::kugou {

bool KGMCryptoX::Configure(const KGMCryptoConfig& config,
                           const std::vector<uint8_t>& slot_key,
                           const kgm_file_header& header) {
    // TODO:

    return true;
};

void KGMCryptoX::Encrypt(uint64_t offset, uint8_t* buffer, size_t n) {
    uint8_t* p = buffer;
    auto slot_key_size = slot_key_.size();
    auto file_key_size = file_key_.size();

    for (size_t i = 0; i < n; i++, p++, offset++) {
        uint8_t offset_key = xor_u32_bytes(static_cast<uint32_t>(offset));
        uint8_t slot_key = slot_key_[offset % slot_key_size];
        uint8_t file_key = file_key_[offset % file_key_size];

        uint8_t temp = *p;
        // TODO:
        *p = temp;
    }
};

void KGMCryptoX::Decrypt(uint64_t offset, uint8_t* buffer, size_t n) {
    uint8_t* p = buffer;
    auto slot_key_size = slot_key_.size();
    auto file_key_size = file_key_.size();

    for (size_t i = 0; i < n; i++, p++, offset++) {
        uint8_t offset_key = xor_u32_bytes(static_cast<uint32_t>(offset));
        uint8_t slot_key = slot_key_[offset % slot_key_size];
        uint8_t file_key = file_key_[offset % file_key_size];

        uint8_t temp = *p;
        // TODO:
        *p = temp;
    }
};

}  // namespace parakeet_crypto::decryptor::kugou
