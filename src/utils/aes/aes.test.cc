#include "parakeet-crypto/utils/aes.h"

#include <cstdint>
#include <gmock/gmock.h>
#include <gtest/gtest.h>

#include <algorithm>
#include <array>
#include <vector>

using ::testing::ContainerEq;
using namespace parakeet_crypto::utils::aes;

// NOLINTBEGIN(*-magic-numbers,cppcoreguidelines-avoid-non-const-global-variables,cppcoreguidelines-owning-memory)

// NOLINTNEXTLINE
static uint8_t g_aes_test_key[]{0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x41,
                                0x42, 0x43, 0x44, 0x45, 0x46, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35,
                                0x36, 0x37, 0x38, 0x39, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46};

TEST(aess, TestAes128)
{
    auto expected_round_key = std::array<uint8_t, detail::AESConfig<BLOCK_SIZE::AES_128>::kKeyExpansionSize>{
        0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x2a, 0x5f,
        0x68, 0x29, 0x1e, 0x6a, 0x5e, 0x1e, 0x26, 0x53, 0x1f, 0x5c, 0x65, 0x17, 0x5a, 0x1a, 0xd8, 0xe1, 0xca, 0x64,
        0xc6, 0x8b, 0x94, 0x7a, 0xe0, 0xd8, 0x8b, 0x26, 0x85, 0xcf, 0xd1, 0x3c, 0x56, 0xdf, 0x21, 0xf3, 0x90, 0x54,
        0xb5, 0x89, 0x70, 0x8c, 0x3e, 0xaf, 0xf5, 0x43, 0xef, 0x93, 0x44, 0x00, 0xfd, 0x15, 0xd4, 0x54, 0x48, 0x9c,
        0xa4, 0xd8, 0x76, 0x33, 0x51, 0x9b, 0x99, 0xa0, 0x40, 0xee, 0x1d, 0xc4, 0x94, 0xba, 0x55, 0x58, 0x30, 0x62,
        0x23, 0x6b, 0x61, 0xf9, 0xba, 0xcb, 0xf9, 0x1a, 0x02, 0x2b, 0x6d, 0xa0, 0x57, 0x73, 0x5d, 0xc2, 0x74, 0x18,
        0x3c, 0x3b, 0xce, 0xd3, 0x5b, 0x91, 0x64, 0xc0, 0x36, 0x31, 0x33, 0xb3, 0x6b, 0xf3, 0x47, 0xab, 0x57, 0xc8,
        0x89, 0x78, 0x33, 0x36, 0xd8, 0x9b, 0x05, 0x07, 0xeb, 0x28, 0x6e, 0xf4, 0xac, 0x83, 0x39, 0x3c, 0x25, 0xfb,
        0xc3, 0x09, 0xd7, 0x89, 0xc6, 0x0e, 0x3c, 0xa1, 0xa8, 0xfa, 0x90, 0x22, 0x91, 0xc6, 0xb5, 0xd9, 0x41, 0xdc,
        0xe2, 0x08, 0x87, 0xd2, 0xde, 0xa9, 0x2f, 0x28, 0x4e, 0x8b, 0xbe, 0xee, 0xfb, 0x52,
    };

    {
        AES<BLOCK_SIZE::AES_128, CRYPTO_MODE::Encrypt> aes_enc(&g_aes_test_key[0]);
        auto actual_key = aes_enc.GetRoundKey();
        ASSERT_THAT(actual_key, ContainerEq(expected_round_key));

        std::array<std::array<uint8_t, 16>, 3> expected_cipher = {{
            {0x9d, 0x2c, 0xda, 0x90, 0x1b, 0x68, 0x2d, 0x33, 0x59, 0x70, 0x9a, 0x5a, 0xb2, 0x41, 0x96, 0x24},
            {0xfe, 0xc1, 0x30, 0x14, 0x98, 0x99, 0x3a, 0xe7, 0x91, 0xa0, 0x35, 0x8b, 0xea, 0xbf, 0x01, 0x20},
            {0xdb, 0xe0, 0xe4, 0xde, 0x2a, 0xf7, 0x80, 0x64, 0x9d, 0x82, 0x58, 0x9a, 0xa6, 0x8d, 0xd8, 0x8c},
        }};

        std::array<uint8_t, 16> data{};
        for (auto expected : expected_cipher)
        {
            aes_enc.Process(data);
            ASSERT_THAT(data, ContainerEq(expected));
        }
    }

    {
        AES<BLOCK_SIZE::AES_128, CRYPTO_MODE::Decrypt> aes_dec(&g_aes_test_key[0]);
        std::array<std::array<uint8_t, 16>, 3> expected_decipher = {{
            {0x50, 0xa4, 0x19, 0xad, 0x3d, 0x30, 0x4a, 0x2a, 0x0f, 0xc4, 0x13, 0x2c, 0x56, 0x4e, 0xf5, 0x9e},
            {0xf1, 0xc6, 0x66, 0x3f, 0x7b, 0x9b, 0xcd, 0xa7, 0x7c, 0xcb, 0x0d, 0x4f, 0xfa, 0x90, 0x1e, 0x26},
            {0x78, 0xec, 0xce, 0x5a, 0xe7, 0x57, 0x51, 0x52, 0xa9, 0x44, 0xc7, 0xa5, 0x66, 0xb9, 0x11, 0x07},
        }};

        std::array<uint8_t, 16> data{};
        for (auto expected : expected_decipher)
        {
            aes_dec.Process(data);
            ASSERT_THAT(data, ContainerEq(expected));
        }
    }
}

TEST(aess, InitAes192)
{
    auto expected_round_key = std::array<uint8_t, detail::AESConfig<BLOCK_SIZE::AES_192>::kKeyExpansionSize>{
        0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x30, 0x31,
        0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0xa7, 0x34, 0xa8, 0x2b, 0x93, 0x01, 0x9e, 0x1c, 0xab, 0x38, 0xdf, 0x5e,
        0xe8, 0x7c, 0x9a, 0x18, 0xd8, 0x4d, 0xa8, 0x2b, 0xec, 0x78, 0x9e, 0x1c, 0x19, 0x3f, 0x34, 0xe5, 0x8a, 0x3e,
        0xaa, 0xf9, 0x21, 0x06, 0x75, 0xa7, 0xc9, 0x7a, 0xef, 0xbf, 0x11, 0x37, 0x47, 0x94, 0xfd, 0x4f, 0xd9, 0x88,
        0x99, 0x0a, 0xf0, 0xb1, 0x13, 0x34, 0x5a, 0x48, 0x32, 0x32, 0x2f, 0xef, 0xfb, 0x48, 0xc0, 0x50, 0xea, 0x7f,
        0x87, 0xc4, 0x17, 0x30, 0x5e, 0x4c, 0x95, 0x52, 0xd9, 0x41, 0x86, 0x66, 0x83, 0x09, 0xb4, 0x54, 0xac, 0xe6,
        0x4f, 0x1c, 0x6c, 0xb6, 0xa5, 0x63, 0xeb, 0x72, 0xb2, 0x53, 0xb5, 0x3e, 0x68, 0x87, 0x6b, 0x76, 0xee, 0xe1,
        0xe8, 0x7f, 0x5a, 0xb5, 0x44, 0x99, 0x15, 0xa9, 0x28, 0x2f, 0xb0, 0xca, 0xc3, 0x5d, 0x02, 0x99, 0x76, 0x63,
        0xa6, 0xbf, 0x90, 0x01, 0x48, 0x5e, 0x78, 0x7e, 0x12, 0xeb, 0x3c, 0xe7, 0x07, 0x42, 0x14, 0xc8, 0xb7, 0x88,
        0xd7, 0x95, 0xb5, 0x11, 0xa1, 0xf6, 0x64, 0x8d, 0xd2, 0xd4, 0x2c, 0xd3, 0xaa, 0xaa, 0x3e, 0x38, 0x96, 0x4d,
        0x39, 0x7a, 0x82, 0x85, 0x8e, 0xf2, 0x55, 0x10, 0x3b, 0xe3, 0xf4, 0xe6, 0xf5, 0x32, 0x5c, 0x36, 0xd9, 0xe1,
        0xf6, 0x9c, 0xe7, 0xd9, 0x60, 0xd1, 0xde, 0xa3, 0xe2, 0x54,
    };

    {
        AES<BLOCK_SIZE::AES_192, CRYPTO_MODE::Encrypt> aes_enc(&g_aes_test_key[0]);
        auto actual_key = aes_enc.GetRoundKey();
        ASSERT_THAT(actual_key, ContainerEq(expected_round_key));

        std::array<std::array<uint8_t, 16>, 3> expected_cipher = {{
            {0x83, 0xef, 0x76, 0x26, 0x6b, 0x99, 0x01, 0x84, 0x95, 0xb8, 0x69, 0x1b, 0x3d, 0xbc, 0xc6, 0xc6},
            {0xda, 0x36, 0xb4, 0x30, 0x70, 0x6c, 0xcf, 0xe1, 0xb6, 0x62, 0x55, 0xd9, 0xa5, 0xf3, 0xa0, 0xa8},
            {0x8f, 0xfc, 0x33, 0x5a, 0xb0, 0xd1, 0xff, 0xb1, 0x92, 0xe6, 0x34, 0x23, 0x81, 0x6d, 0xdc, 0x2c},
        }};

        std::array<uint8_t, 16> data{};
        for (auto expected : expected_cipher)
        {
            aes_enc.Process(data);
            ASSERT_THAT(data, ContainerEq(expected));
        }
    }

    {
        AES<BLOCK_SIZE::AES_192, CRYPTO_MODE::Decrypt> aes_dec(&g_aes_test_key[0]);
        std::array<std::array<uint8_t, 16>, 3> expected_decipher = {{
            {0x33, 0x56, 0x27, 0x07, 0x06, 0xd9, 0xeb, 0xea, 0x53, 0xac, 0x30, 0xf1, 0xf4, 0x97, 0x61, 0x98},
            {0xd5, 0x84, 0x1b, 0x5c, 0x36, 0x4b, 0xed, 0x2b, 0xeb, 0x3c, 0xe9, 0x6b, 0xba, 0x12, 0x13, 0x2b},
            {0x25, 0x45, 0xce, 0x94, 0x4f, 0xd1, 0xb1, 0x71, 0xc7, 0x64, 0xeb, 0x57, 0x9f, 0x75, 0xff, 0x5b},
        }};

        std::array<uint8_t, 16> data{};
        for (auto expected : expected_decipher)
        {
            aes_dec.Process(data);
            ASSERT_THAT(data, ContainerEq(expected));
        }
    }
}

TEST(aess, InitAes256)
{
    auto expected_round_key = std::array<uint8_t, detail::AESConfig<BLOCK_SIZE::AES_256>::kKeyExpansionSize>{
        0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x30, 0x31,
        0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x2a, 0x5f, 0x68, 0x29,
        0x1e, 0x6a, 0x5e, 0x1e, 0x26, 0x53, 0x1f, 0x5c, 0x65, 0x17, 0x5a, 0x1a, 0x7d, 0xc1, 0x8c, 0x91, 0x49, 0xf4,
        0xba, 0xa6, 0x71, 0xcd, 0xfb, 0xe4, 0x32, 0x89, 0xbe, 0xa2, 0x8f, 0xf1, 0x52, 0x0a, 0x91, 0x9b, 0x0c, 0x14,
        0xb7, 0xc8, 0x13, 0x48, 0xd2, 0xdf, 0x49, 0x52, 0xc8, 0x5f, 0xb7, 0x91, 0x81, 0xab, 0x0d, 0x37, 0xf0, 0x66,
        0xf6, 0xd3, 0xc2, 0xef, 0x48, 0x71, 0x54, 0xa3, 0xf1, 0x2f, 0xc5, 0x38, 0xfd, 0x3b, 0x72, 0xf0, 0xee, 0x73,
        0xa0, 0x2f, 0xa7, 0x21, 0x28, 0x4a, 0xeb, 0x6c, 0xa9, 0xe1, 0xe6, 0x5b, 0x59, 0x87, 0x10, 0x88, 0x9b, 0x68,
        0x58, 0xf9, 0x19, 0xc9, 0x68, 0x3b, 0xdc, 0xf1, 0x95, 0x00, 0xae, 0x01, 0x7b, 0x73, 0x0e, 0x2e, 0xdc, 0x52,
        0x83, 0x7b, 0x6d, 0x6c, 0x2a, 0x9a, 0x8b, 0x37, 0x73, 0x1d, 0x9b, 0xbf, 0xe8, 0x75, 0xc3, 0x46, 0x94, 0xe7,
        0x32, 0xa0, 0x48, 0x16, 0xa7, 0xa0, 0xe6, 0x17, 0xdc, 0xd3, 0xe8, 0x39, 0x00, 0x81, 0x18, 0x69, 0x0e, 0x60,
        0x32, 0xf3, 0x85, 0x57, 0x41, 0xee, 0x1e, 0xe8, 0xa9, 0x9b, 0xdd, 0xae, 0xa0, 0x26, 0xd6, 0x73, 0xe8, 0x30,
        0x71, 0xd3, 0x0e, 0x27, 0xad, 0x00, 0xe6, 0x1e, 0xad, 0x81, 0x96, 0x1b, 0x9b, 0x6c, 0xa4, 0xe8, 0x1e, 0x3b,
        0xe5, 0x06, 0x00, 0xd3, 0x4c, 0x9d, 0xdd, 0x7d, 0xbe, 0xe7, 0x29, 0x5a, 0x56, 0xd7, 0x58, 0x89, 0x58, 0xf0,
        0xf5, 0x89, 0xbe, 0xee, 0x58, 0x08};

    {
        AES<BLOCK_SIZE::AES_256, CRYPTO_MODE::Encrypt> aes_enc(&g_aes_test_key[0]);
        auto actual_key = aes_enc.GetRoundKey();
        ASSERT_THAT(actual_key, ContainerEq(expected_round_key));

        std::array<std::array<uint8_t, 16>, 3> expected_cipher = {{
            {0xab, 0x0b, 0x21, 0x01, 0x07, 0x4b, 0xea, 0x27, 0x96, 0xfe, 0x5f, 0x46, 0x8d, 0xf6, 0xf1, 0xdb},
            {0x5d, 0xe5, 0x11, 0x06, 0xc5, 0xf2, 0x0b, 0x56, 0xd5, 0x9e, 0x6c, 0xd6, 0xec, 0xbf, 0x4d, 0x09},
            {0xaf, 0x00, 0x29, 0xa8, 0x24, 0x76, 0x32, 0xc3, 0xf2, 0xc0, 0x5d, 0xc3, 0x53, 0xc7, 0x58, 0x48},
        }};

        std::array<uint8_t, 16> data{};
        for (auto expected : expected_cipher)
        {
            aes_enc.Process(data);
            ASSERT_THAT(data, ContainerEq(expected));
        }
    }

    {
        AES<BLOCK_SIZE::AES_256, CRYPTO_MODE::Decrypt> aes_dec(&g_aes_test_key[0]);

        std::array<std::array<uint8_t, 16>, 3> expected_decipher = {{
            {0x26, 0xa2, 0x71, 0x1b, 0xdb, 0xc3, 0x45, 0x8b, 0x31, 0xf3, 0xe4, 0x82, 0xd7, 0x04, 0xa5, 0x04},
            {0x16, 0x01, 0x60, 0xc7, 0x32, 0x57, 0x3d, 0xcc, 0xb1, 0xe7, 0x9f, 0x1b, 0x9a, 0x95, 0xc7, 0x7c},
            {0x36, 0xc4, 0x75, 0x39, 0x15, 0x8b, 0x66, 0x5f, 0x6f, 0x41, 0x70, 0x33, 0x19, 0xf1, 0xb7, 0x55},
        }};

        std::array<uint8_t, 16> data{};
        for (auto expected : expected_decipher)
        {
            aes_dec.Process(data);
            ASSERT_THAT(data, ContainerEq(expected));
        }
    }
}

// NOLINTEND(*-magic-numbers,cppcoreguidelines-avoid-non-const-global-variables,cppcoreguidelines-owning-memory)
